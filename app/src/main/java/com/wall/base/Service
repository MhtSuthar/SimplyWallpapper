package com.newstudio.service

import android.app.NotificationManager
import android.app.Service
import android.content.Context
import android.content.Intent
import android.os.Binder
import android.os.IBinder
import android.support.v4.app.NotificationCompat
import android.util.Log
import com.newstudio.R
import com.newstudio.listner.OnCommunicateService
import com.newstudio.model.Download
import java.io.BufferedInputStream
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.net.URL

/**
 * Created by AND001 on 6/14/2017.
 */
class MyLongService : Service(){

    var TAG : String = "MyLongService"
    var onCommunicateService : OnCommunicateService? = null

    val MESSAGE_PROGRESS = "message_progress"
    private var notificationBuilder: NotificationCompat.Builder? = null
    private var notificationManager: NotificationManager? = null
    private var totalFileSize: Int = 0
    private var mDownLoadUrl = ""
    private var mFilePath = ""
    lateinit var output : FileOutputStream

    private val mBinder = LocalBinder()

    override fun onBind(intent: Intent?): IBinder {
        return mBinder
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        mDownLoadUrl = intent!!.getStringExtra("url")
        mFilePath = intent!!.getStringExtra("file_path")
        Log.e(TAG, "mDownLoadUrl "+mDownLoadUrl+"  mFilePath  "+mFilePath)
        notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        notificationBuilder = NotificationCompat.Builder(this)
                .setSmallIcon(R.mipmap.ic_launcher)
                .setContentTitle("Download")
                .setContentText("Downloading File")
                .setAutoCancel(true)
        notificationManager!!.notify(0, notificationBuilder!!.build())

        //initDownload()
        Thread(Runnable {
            startDownload()
        }).start()

        return START_REDELIVER_INTENT
    }

    fun startDownload(){
        try {
            var total: Long = 0L
            val url = URL(mDownLoadUrl)
            val connection = url.openConnection()

            // this will be useful so that you can show a typical 0-100% progress bar
            val file = File(mFilePath)
            if (file.exists()) {
                total = file.length().toLong()
                connection.setRequestProperty("Range", "bytes=" + file.length() + "-")
            }
            //connection.connect()
            connection.doInput = true
            //connection.doOutput = true

            val fileLength = connection.contentLength + total
            // download the file
            val input = BufferedInputStream(connection.getInputStream())
            val outputFile = File(mFilePath)
            output = if (total == 0L)  FileOutputStream(outputFile) else FileOutputStream(outputFile, true)

            val data = ByteArray(1024)

            var count: Int = 0
            val startTime = System.currentTimeMillis()
            var timeCount = 1

            while (count != -1) {
                count = input.read(data)
                total += count.toLong()
                totalFileSize = (fileLength / Math.pow(1024.0, 2.0)).toInt()
                val current = Math.round(total / Math.pow(1024.0, 2.0)).toDouble()
                // publishing the progress....
                val download = Download()
                download.totalFileSize = totalFileSize
                var progress : Int  = (total * 100 / fileLength).toInt()
                val currentTime = System.currentTimeMillis() - startTime

                if (currentTime > 1000 * timeCount) {
                    download.currentFileSize = current.toInt()
                    download.progress = progress
                    sendNotification(download)
                    timeCount++
                }

                if(count != -1)
                    output.write(data, 0, count)
            }
            onDownloadComplete()
            output.flush()
            output.close()
            input.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    override fun onCreate() {
        super.onCreate()
        Log.e(TAG, "Service Started")
        //onCommunicateService?.onServiceStarted()
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.e(TAG, "Service Destroy")
    }

    inner class LocalBinder : Binder() {
        val service: MyLongService
            get() = this@MyLongService
    }

    fun setIdealizeInterface(onCommunicateService : OnCommunicateService){
        this.onCommunicateService = onCommunicateService
    }

    private fun sendNotification(download: Download) {
        notificationBuilder!!.setProgress(100, download.progress, false)
        notificationBuilder!!.setContentText("Downloading file " + download.currentFileSize + "/" + totalFileSize + " MB")
        notificationManager!!.notify(0, notificationBuilder!!.build())
    }

    private fun onDownloadComplete() {
        val download = Download()
        download.progress = 100

        notificationManager!!.cancel(0)
        notificationBuilder!!.setProgress(0, 0, false)
        notificationBuilder!!.setContentText("File Downloaded")
        notificationManager!!.notify(0, notificationBuilder!!.build())

        stopSelf()
    }

    fun pauseDownload() {
        output.close()
    }

    fun resumeDownload(){
        Thread(Runnable {
            startDownload()
        }).start()
    }
}
