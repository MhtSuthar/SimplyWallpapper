/*
 * Copyright 2013 Tristan Waddington
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.newstudio.service

import android.app.Service
import android.content.ClipboardManager
import android.content.Context
import android.content.Intent
import android.os.*
import android.text.TextUtils
import android.util.Log
import android.util.Patterns
import android.view.WindowManager
import android.widget.ImageView
import android.widget.TextView
import com.google.gson.JsonObject
import com.newstudio.R
import com.newstudio.rest.ApiRequest
import com.newstudio.utils.DialogUtils
import com.newstudio.utils.FileUtils
import org.json.JSONObject
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.io.BufferedWriter
import java.io.File
import java.io.FileWriter
import java.io.IOException
import java.net.HttpURLConnection
import java.net.URL
import java.util.*
import java.util.concurrent.Executors


/**
 * Monitors the [ClipboardManager] for changes and logs the text to a file.
 */
class ClipboardMonitorService : Service() {

    private var mHistoryFile: File? = null
    private val mThreadPool = Executors.newSingleThreadExecutor()
    private var mClipboardManager: ClipboardManager? = null
    lateinit private var mContext : Context
    lateinit var mHandler : Handler


    override fun onCreate() {
        super.onCreate()
        mContext = this
        // TODO: Show an ongoing notification when this service is running.
        mHistoryFile = File(getExternalFilesDir(null), FILENAME)
        mClipboardManager = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
        mClipboardManager!!.addPrimaryClipChangedListener(
                mOnPrimaryClipChangedListener)

        mHandler = object : Handler(Looper.getMainLooper()) {
            override fun handleMessage(message: Message) {
                Log.e(TAG, ""+message)
                if(message.what == 123) {
                    openDialogForDownload(message.obj.toString())
                }
            }
        }
    }

    private fun openDialogForDownload(copy: String) {
        val alertDialog = DialogUtils.showDialogForValidation(R.layout.dialog_download, mContext)
        var mTxtDownload = alertDialog.findViewById(R.id.txt_download) as TextView
        var mImageClose = alertDialog.findViewById(R.id.img_close) as ImageView
        mTxtDownload.setOnClickListener {
            var myService = Intent(this, MyLongService::class.java)
            myService.putExtra("url", copy)
            myService.putExtra("file_path", FileUtils.getFilePath(copy.substring(copy.lastIndexOf(".") + 1)))
            startService(myService)
        }

        mImageClose.setOnClickListener {
            alertDialog.dismiss()
        }

        alertDialog.window.setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT)
        alertDialog.show()
    }

    override fun onDestroy() {
        super.onDestroy()

        if (mClipboardManager != null) {
            mClipboardManager!!.removePrimaryClipChangedListener(
                    mOnPrimaryClipChangedListener)
        }
    }

    override fun onBind(intent: Intent): IBinder? {
        return null
    }

    private val isExternalStorageWritable: Boolean
        get() {
            val state = Environment.getExternalStorageState()
            if (Environment.MEDIA_MOUNTED == state) {
                return true
            }
            return false
        }

    private val mOnPrimaryClipChangedListener = ClipboardManager.OnPrimaryClipChangedListener {
        try {
            val clip = mClipboardManager!!.primaryClip
            mThreadPool.execute(WriteHistoryRunnable(
                    clip.getItemAt(0).text))
        }catch (exeption : Exception){
            exeption.printStackTrace()
        }
    }

    private inner class WriteHistoryRunnable(private val mTextToWrite: CharSequence) : Runnable {
        private val mNow: Date

        init {
            mNow = Date(System.currentTimeMillis())
        }

        override fun run() {
            if (TextUtils.isEmpty(mTextToWrite)) {
                // Don't write empty text to the file
                return
            }

            Log.e(TAG, mTextToWrite.toString())

            if(Patterns.WEB_URL.matcher(mTextToWrite.toString()).matches()) {
                val url = URL(mTextToWrite.toString())
                val connection = url.openConnection() as HttpURLConnection
                val code = connection.responseCode
                Log.e(TAG, "is downloadeble ornot " + code)
                if (code == 200) {
                    if(mTextToWrite.toString().contains("https://www.instagram.com/p")){
                        getIntagramResponse(mTextToWrite.toString())
                    }else {
                        val message = mHandler.obtainMessage(123, mTextToWrite.toString())
                        message.sendToTarget()
                    }
                } else {
                }
            }

            if (isExternalStorageWritable) {
                try {
                    Log.i(TAG, "Writing new clip to history:")
                    Log.i(TAG, mTextToWrite.toString())
                    val writer = BufferedWriter(FileWriter(mHistoryFile!!, true))
                    writer.write(String.format("[%s]: ", mNow.toString()))
                    writer.write(mTextToWrite.toString())
                    writer.newLine()
                    writer.close()
                } catch (e: IOException) {
                    Log.w(TAG, String.format("Failed to open file %s for writing!",
                            mHistoryFile!!.absoluteFile))
                }

            } else {
                Log.w(TAG, "External storage is not writable!")
            }
        }
    }

    private fun getIntagramResponse(url: String) {
        val apiInterface = ApiRequest.provideInterface()
        val call = apiInterface.instagramResponse(url+"?__a=1")
        call.enqueue(object : Callback<JsonObject> {
            override fun onResponse(call: Call<JsonObject>, response: Response<JsonObject>) {
                if (response.isSuccessful()) {
                    var jsonObject = JSONObject(response.body().toString())
                    Log.e("res", ""+jsonObject)
                    var jObject = jsonObject.getJSONObject("graphql").getJSONObject("shortcode_media")
                    if(jObject.getBoolean("is_video")){
                        val message = mHandler.obtainMessage(123, jObject.getString("video_url"))
                        message.sendToTarget()
                    }else{
                        val message = mHandler.obtainMessage(123, jObject.getString("display_url"))
                        message.sendToTarget()
                    }
                }
            }

            override fun onFailure(call: Call<JsonObject>, t: Throwable) {

            }
        })
    }


    companion object {
        private val TAG = "ClipboardManager"
        private val FILENAME = "clipboard-history.txt"
    }
}
